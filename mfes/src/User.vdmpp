class User

types 
	public String = seq1 of char; /* to not allow null sequences*/
	 public Date :: day : nat
 								 month : nat
 								 year : nat
		inv d == d.year > 2018 and 
				d.month <= 12 and
				d.day <=  31;
	
instance variables	
  posts : set of Post := {};
  friends : set of(User) := {};
  pendentFriendRequests : set of(User) := {};
  family: set of(User) := {};
  
  birthday:Date;
  email:String;
  name:String;
  password: String;
  
operations
 	public User : String*Date*String*String ==> User 
 		User(n,b,e,p)==(	
 		name := n; birthday := b;email := e; password := p; return self) 
		pre len n >0
		post posts = {} and friends ={} and name = name and pendentFriendRequests={}; 

	
	public getName:() ==> String 
		getName() ==
		return name
		pre true
		post RESULT = name;
	
	public getBirthday: () ==> Date
		getBirthday() ==
		return birthday
		pre true
		post RESULT=birthday;
	
	public getEmail: () ==> String 
		getEmail() ==
		return email
		pre true
		post RESULT=email;


	pure public getPassword : () ==> String
		getPassword() ==
		return password
		pre true
		post RESULT=password;
	
	pure public getFriends : () ==> set of User
		getFriends() ==
		return friends
		pre true
		post RESULT=friends;

	public getPosts:  User ==> set of Post 
		getPosts(u) == (
		dcl res : set of Post :={};
		for all p in set posts do(
			if p.isAvailable(u)
			then res := {p} union res;
			);
		return res;
		);
	
	public addPost : String*Post`Permission ==> Post
		addPost(c,p) ==( 
		dcl pst: Post := new Post(c,p,self);
	  posts := {pst} union posts;
	  return pst)
	 	post posts = {RESULT} union posts~;
	 	
	public removePost : Post ==> ()
		removePost(p) ==(
		posts := posts \ {p};
		)
		post posts = posts~ \ {p};
 	
 	public acceptRequest : User ==> ()
 		acceptRequest(f) ==(
 		friends := {f} union friends;
	 	f.addFriend(self);
	 	pendentFriendRequests := pendentFriendRequests \{f}
	 	)
	 	pre card friends < 500
	 	post friends = {f} union friends~ and pendentFriendRequests =pendentFriendRequests~ \{f};
	 	
 	public rejectRequest : User==> ()
 		rejectRequest(f) == (
	 	pendentFriendRequests := pendentFriendRequests \{f}
	 	)
	 	pre f in set pendentFriendRequests
	 	post f not in set pendentFriendRequests; 
	 	
 	public sendFriendRequest : User==>()
 		sendFriendRequest(f) ==
	 	f.addFriendRequest(self);
 	
 	public addFriend :  User==>()
 		addFriend(f) ==
	 	friends := {f} union friends
	 	pre card friends < 500
	 	post friends = {f} union friends~;
 	
 	
 	public addFriendRequest : User==>()
 		addFriendRequest(f) ==
	 	pendentFriendRequests := {f} union pendentFriendRequests
	 	pre true
	 	post pendentFriendRequests = {f} union pendentFriendRequests~;
	 	
 	public unfriend : User ==> ()
 		unfriend(f) ==
	 	(removeFriend(f);
	 	f.removeFriend(self);
	 	)
	 	post f not in set friends;
 	
 	public removeFriend : User ==> ()
 		removeFriend(f) ==
	 	friends := friends \{f}
	 	post friends =friends~ \{f};

 	public getNumberOfFriends : () ==> nat
 		getNumberOfFriends() ==
	 	return card friends
	 	pre true
	 	post RESULT= card friends;
 	
 	public getNumberOfPendentRequests : () ==> nat
 		getNumberOfPendentRequests() ==
	 	return card pendentFriendRequests
	 	pre true
	 	post RESULT= card pendentFriendRequests;
	 	
 	public hasPost : Post ==> bool 
 		hasPost(p) ==
	 	return p in set posts
	 	pre true
	 	post RESULT= p in set posts;
	 	
 	public hasFriend : User ==> bool
 		hasFriend(u) ==
	 	return u in set friends
	 	pre true
	 	post RESULT= u in set friends;
 	
	public hasFriendRequest : User ==> bool
		hasFriendRequest(u) ==
	 	return u in set pendentFriendRequests
	 	pre true
	 	post RESULT= u in set pendentFriendRequests;
 	
 	public addToFamily: User ==> ()
	 	addToFamily(u) == (
	 	family := {u} union family)
	 	post family = {u} union family;
 	
 	public getPermission: User ==> Post`Permission
	 	getPermission(u) ==(
	 	if u = self
	 	then return "family";
	 	if u in set family
	 	then return "family"
	 	else return "public");
	 		
end User
