class Facebook
types 
	public String = seq1 of char; /* to not allow null sequences*/
	public Date :: day:nat
							 month:nat
							 year:nat;

instance variables
	users: set of User := {};
	currentUser : User;
	feed: set of Post := {};


operations
	public register : User`String*User`Date*User`String*User`String ==> User
	register(n,b,e,p) ==(
	currentUser := new User(n,b,e,p);
	users := {currentUser} union users;
	return currentUser;
	)
  post users = {currentUser} union users~ and RESULT=currentUser;


	public login: User`String*User`String ==> User
		login(e,p) ==(
		 for all u in set users do(
		 if u.getEmail()= e 
		 then if u.getPassword() =p
		 then (IO`print("\n Login Success");
		 currentUser:=u; return currentUser;)
		 );
		 return currentUser;
		)
		post RESULT=currentUser;

	public logout() ==
		currentUser := new User();

	public hasUser : User ==> bool
		hasUser(u) ==
	 	return u in set users
	 	pre true
	 	post RESULT= u in set users;
 	
 	public getCurrentUser: () ==> User
 		getCurrentUser() == 
	 	return currentUser
	 	post RESULT=currentUser;
	 	
 	public recommendUsers: () ==> set of User 
 		recommendUsers() ==(
	 	dcl recommendations: set of User := {};
	 	dcl friends: set of User := currentUser.getFriends();
	 	for all u in set friends do(
		 	dcl friendsOfFriends: set of User := u.getFriends();
		 	for all f in set friendsOfFriends do(
			 	if f not in set friends 
			 	then recommendations := {f} union recommendations;
		 		)
	 		);
	 		return recommendations;
	 	)
	 	pre card users >0 and card currentUser.getFriends()>0;
 	
 	
 	public hasFriend : User*set of User ==> bool
 		hasFriend(u,us) ==
	 	return u in set us
	 	pre true
	 	post RESULT= u in set us;
 	
 	public getFeed: () ==> set of Post
 		getFeed() ==(
 	 	dcl friends: set of User := currentUser.getFriends();
 		for all u in set friends do(
			 	dcl posts: set of Post := u.getPosts(currentUser);
			 	feed := posts union feed;
 			);
 		return feed;
 		)
 		pre currentUser <> undefined;

end Facebook