class UserTest
	types 
		public String = seq of char;

	 instance variables
		 u : User := new User("Sofia",mk_User`Date(1,1,2019),"sofia@gmail.com","123");
		 c : String := "I am a Post";
		 p : Post`Permission := "public";
		 u2 : User := new User("Joao",mk_User`Date(1,1,2019),"joao@gmail.com","123");
		 u3 : User := new User("rita",mk_User`Date(1,1,2019),"jose@gmail.com","123");
		 u4 : User := new User("mario",mk_User`Date(1,1,2019),"jose@gmail.com","123");
		 u5 : User := new User("teresa",mk_User`Date(1,1,2019),"jose@gmail.com","123");
		 face: Facebook := new Facebook();
		 
	 operations
		 private assertTrue: bool ==> ()
		 assertTrue(cond) == return
		 pre cond;
		
		 --Função que verifica os parametros do utilizador
		 private verifyUser()==(
		  IO`print("\nTest User");
			assertTrue(u.getName() = "Sofia");
			assertTrue(u.getBirthday() = mk_User`Date(1,1,2019));
			assertTrue(u.getEmail() = "sofia@gmail.com");
			);
			
		--Função para testar adicionar post
		 private addPost()==(
		  IO`print("\nTest Add Post");
		 	assertTrue(u.hasPost(u.addPost(c,p)) = true);
		 );
		 
		 -- Função para testar mandar pedido de amizade a um utilizador
		 private sendFriendRequest()==
		 (
		 IO`print("\nSend Friend Request test");
		 assertTrue(u.getNumberOfPendentRequests() = 0);
		 assertTrue(u.hasFriendRequest(u2)=false);
		 u2.sendFriendRequest(u);
 		 assertTrue(u.getNumberOfPendentRequests() = 1);
 		 assertTrue(u.hasFriendRequest(u2)=true);
		 );
		 
		 --Função para testar aceitar pedido de amizade
		 private acceptFriendRequest() ==
		 (
		 assertTrue(u.hasFriendRequest(u2)=false);
		 u2.sendFriendRequest(u);
		 assertTrue(u.hasFriendRequest(u2)=true);
		 u.acceptRequest(u2);
		 assertTrue(u.hasFriendRequest(u2)=false);
		 assertTrue(u.getNumberOfFriends() = 1);
		 assertTrue(u.hasFriend(u2)=true);
		 assertTrue(u2.hasFriend(u)=true);
		 assertTrue(u2.getNumberOfFriends() = 1);
		 assertTrue(u.getNumberOfPendentRequests() = 0);
		 );
		 
		 --Função para testar rejeitar pedido de amizade
		 private rejectFriendRequest()==
		 (
		 u2.sendFriendRequest(u);
		 assertTrue(u.getNumberOfPendentRequests() = 1);
		 assertTrue(u2.getNumberOfFriends() = 0);
		 u.rejectRequest(u2);
		 assertTrue(u.getNumberOfPendentRequests() = 0);
		 assertTrue(u2.getNumberOfFriends() = 0);
		 );
		 
		 --Função para testar remover amigo da lista de amigos
		 private removeFriend() ==
		 (
		 u2.sendFriendRequest(u);
		 u.acceptRequest(u2);
		 assertTrue(u.hasFriend(u2)=true);
		 assertTrue(u2.hasFriend(u)=true);
		 u.unfriend(u2);
		 assertTrue(u.hasFriend(u2)=false);
		 assertTrue(u2.hasFriend(u)=false);
		 );
		 
		 --função para testar registar e login no facebook
		 private createUser() ==
		 (
		 u2:=face.register("Sofia",mk_User`Date(1,1,2019),"sofia@gmail.com","123");
		 u:=face.login("sofi@gmail.com","123");
		 assertTrue(u=u2);
		 assertTrue(face.getCurrentUser()=u);
		 assertTrue(face.hasUser(u2)=true);
		 );
		 
		 --função para testar o logout
		 private logout() ==
		 (
		  u2:=face.register("Sofia",mk_User`Date(1,1,2019),"sofia@gmail.com","123");
		  assertTrue(face.hasUser(u2)=true);
		  assertTrue(face.getCurrentUser()=u2);
		  face.logout();
			assertTrue(face.hasUser(u2)=true);
			assertTrue(face.getCurrentUser()<>u2);
		 
		 );
		 
		 private friends_recommendations() ==
		 (
		  IO`print("\nFriend recommendations test");
		  u2:=face.register("Sofia",mk_User`Date(1,1,2019),"sofia@gmail.com","123");
		 	u2.sendFriendRequest(u);
		 	u2.sendFriendRequest(u3);
		 	u.acceptRequest(u2);
		 	u3.acceptRequest(u2);
		 	u3.sendFriendRequest(u4);
		 	u4.acceptRequest(u3);
		 	u.sendFriendRequest(u5);
		 	u5.acceptRequest(u);
		 	assertTrue(face.hasFriend(u5,face.recommendUsers())=true);
		 	assertTrue(face.hasFriend(u4,face.recommendUsers())=true);
		 	assertTrue(face.hasFriend(u,face.recommendUsers())=false);
		 	assertTrue(face.hasFriend(u3,face.recommendUsers())=false);
		 
		 );
		 
		 public static main() ==
		 (
		  new UserTest().verifyUser();
		  new UserTest().addPost();
		 	new UserTest().sendFriendRequest();
		 	new UserTest().acceptFriendRequest();
		  new UserTest().removeFriend();
		  new UserTest().rejectFriendRequest();
		  new UserTest().createUser();
		  new UserTest().logout();
		  new UserTest().friends_recommendations();
		 );
end UserTest
