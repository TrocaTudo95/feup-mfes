class FacebookTest
	types 
		public String = seq of char;

	 instance variables
		 u : User := new User("Sofia",mk_User`Date(1,1,2019),"sofia@gmail.com","123");
		 u2 : User := new User("Joao",mk_User`Date(1,1,2019),"joao@gmail.com","123");
		 u3 : User := new User("rita",mk_User`Date(1,1,2019),"jose@gmail.com","123");
		 u4 : User := new User("mario",mk_User`Date(1,1,2019),"jose@gmail.com","123");
		 u5 : User := new User("teresa",mk_User`Date(1,1,2019),"jose@gmail.com","123");
		 face: Facebook := new Facebook();
		 

operations

 private assertTrue: bool ==> ()
		 assertTrue(cond) == return
		 pre cond;
 --função para testar registar e login no facebook
		 private createUser() ==(
		 IO`print("\nRegister Test");
		 u2:=face.register("Sofia",mk_User`Date(1,1,2019),"sofia@gmail.com","123");
		 u:=face.login("sofi@gmail.com","123");
		 assertTrue(u=u2);
		 assertTrue(face.getCurrentUser()=u);
		 assertTrue(face.hasUser(u2)=true);
		 );
		 
		 --função para testar o logout
		 private logout() ==( 
		  IO`print("\nLogout Test");
		  u2:=face.register("Sofia",mk_User`Date(1,1,2019),"sofia@gmail.com","123");
		  assertTrue(face.hasUser(u2)=true);
		  assertTrue(face.getCurrentUser()=u2);
		  face.logout();
			assertTrue(face.hasUser(u2)=true);
			assertTrue(face.getCurrentUser()<>u2);
		 
		 );
		 
		 private friends_recommendations() ==
		 (
		  IO`print("\nFriend recommendations test");
		  u2:=face.register("Sofia",mk_User`Date(1,1,2019),"sofia@gmail.com","123");
		 	u2.sendFriendRequest(u);
		 	u2.sendFriendRequest(u3);
		 	u.acceptRequest(u2);
		 	u3.acceptRequest(u2);
		 	u3.sendFriendRequest(u4);
		 	u4.acceptRequest(u3);
		 	u.sendFriendRequest(u5);
		 	u5.acceptRequest(u);
		 	assertTrue(face.hasFriend(u5,face.recommendUsers())=true);
		 	assertTrue(face.hasFriend(u4,face.recommendUsers())=true);
		 	assertTrue(face.hasFriend(u,face.recommendUsers())=false);
		 	assertTrue(face.hasFriend(u3,face.recommendUsers())=false);
		 
		 );
		 
		 private feed() ==(
		  dcl p1:Post := u2.addPost("I am a public post","public");
		  dcl p2:Post := u2.addPost("I am a family only post","family");
		  
		  IO`print("\nGet Empty Feed Test");
		  u:=face.register("Sofia",mk_User`Date(1,1,2019),"sofia@gmail.com","123");
		  u:=face.login("sofi@gmail.com","123");
		  assertTrue(face.getFeed() = {});
		  
		  IO`print("\nGet Friends Feed Test");
		  u2.sendFriendRequest(u);
			u.acceptRequest(u2);
			assertTrue(face.getFeed() = {p1});
			
		  IO`print("\nGet Family Feed Test");
			u2.addToFamily(u);
			assertTrue(face.getFeed() = {p1,p2});
			
		 );
		 
		 public static run() ==
		 (
		  new FacebookTest().createUser();
		  new FacebookTest().logout();
		  new FacebookTest().friends_recommendations();
		  new FacebookTest().feed();
		 );
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end FacebookTest